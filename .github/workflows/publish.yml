name: Python Package
run-name: Run ${{ github.run_id }}

on:
 release:
   types:
     - published

jobs:
  wheel:
    name: Build Wheel
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
          os: [ubuntu-22.04]
          python-version: ['3.9']
          torch-version: [1.13.1, 2.0.1]
          cuda-version: ['117', '118']
          include:
            - os: macos-13
              torch-version: 2.0.1
              cuda-version: 'cpu'
          exclude:
            - torch-version: 1.13.1
              cuda-version: '118'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Set up Linux Env
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo rm -rf /usr/share/dotnet
          bash .github/workflows/env.sh
        shell:
          bash

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          bash .github/workflows/cuda/cu${{ matrix.cuda-version }}-${{ runner.os }}.sh
        shell:
          bash

      - name: Check GPU Env
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          source .github/workflows/cuda/cu${{ matrix.cuda-version }}-${{ runner.os }}-env.sh
          nvcc --version
        shell:
          bash

      - name: Install PyTorch ${{ matrix.torch-version }}+cu${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          pip install numpy pyyaml scipy ipython mkl mkl-include ninja cython typing pandas typing-extensions dataclasses
          pip install sympy networkx jinja2 cmake lit
          pip install torch==${{ matrix.torch-version }} --index-url https://download.pytorch.org/whl/cu${{ matrix.cuda-version }}
          python --version
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "from torch.utils import cpp_extension; print (cpp_extension.CUDA_HOME)"
        shell:
          bash

      - name: Install PyTorch ${{ matrix.torch-version }}+${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version == 'cpu' }}
        run: |
          pip install numpy pyyaml scipy ipython mkl mkl-include ninja cython typing pandas typing-extensions dataclasses
          pip install --no-cache-dir torch==${{ matrix.torch-version }}
          python --version
          python -c "import torch; print('PyTorch:', torch.__version__)"
        shell:
          bash

      - name: Build CUDA Wheel
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          pip install wheel
          python setup.py bdist_wheel --dist-dir=dist
          tmpname=cu${{ matrix.cuda-version }}torch${{ matrix.torch-version }}
          wheel_name=$(ls dist/*whl | xargs -n 1 basename | sed "s/-/+$tmpname-/2")
          ls dist/*whl |xargs -I {} mv {} ${wheel_name}
          echo "wheel_name=${wheel_name}" >> $GITHUB_ENV

      - name: Build CPU Wheel
        if: ${{ matrix.cuda-version == 'cpu' }}
        run: |
          pip install wheel
          python setup.py bdist_wheel --dist-dir=dist --disable-cuda-ext
          tmpname=cpu+torch${{ matrix.torch-version }}
          wheel_name=$(ls dist/*whl | xargs -n 1 basename | sed "s/-/+$tmpname-/2")
          ls dist/*whl |xargs -I {} mv {} ${wheel_name}
          echo "wheel_name=${wheel_name}" >> $GITHUB_ENV        

      - name: Get Release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Release Asset
        id: upload_release_asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./${{ env.wheel_name }}
          asset_name: ${{ env.wheel_name }}
          asset_content_type: application/*
